;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; THE SYSTEM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(declare-const LB Real)
(assert (= LB 9.0))

(declare-const UB Real)
(assert (= UB 11.0))

(declare-tfun REACT1 Real)
(declare-tfun COND1 Real)

(declare-tfun ACT1 Bool)
(declare-tfun SIGREACT1 Bool)
(declare-tfun S Bool)

;; S is some condition that, when it holds for C1 instants, triggers some action ACT1 within C2 instants.
;; formula monitor:
;; Lasted(S, C1) -> Futr(WithinF(ACT1, C2), 1)

;; (defvar monitor  
;;   (-> (lasted (!! (-P- S)) C1)
;;       (futr (withinf (-P- ACT1) C2) 1)))
;; monitor
(assert (release false
		 (-> (yesterday (! S))
		     (next (next (next (or ACT1 (next ACT1))))))))

;; action ACT1, in turn, triggers a reaction SIGREACT1 in an interval [C3,C4]
;; formula reaction:
;; ACT1 -> Futr(Lasts(SIGREACT1, C4-C3), C3)

;; (defvar reaction
;;   (-> (-P- ACT1)
;;       (futr (lasts (-P- SIGREACT1) (- C4 C3)) C3)))
;; reaction
(assert (release false
		 (-> ACT1
		     (next (next (next (next (and SIGREACT1 (next SIGREACT1))))))))) 


;; (defvar numerical_reaction1
;;   (-> (-P- SIGREACT1)
;;       (&& ([>=] (-V- REACT1) LB) ([<=] (-V- REACT1) UB))))
;; numerical_reaction1
(assert (release false
		 (-> SIGREACT1
		     (and (>= REACT1 LB)
			  (<= REACT1 UB)))))


;; (defvar numerical_reaction2
;;   (-> (!! (-P- SIGREACT1))
;;       ([=] (-V- REACT1) 0)))
;; numerical_reaction2
(assert (release false
		 (-> (! SIGREACT1)
		     (= REACT1 0.0))))


;; (defvar monitor2  
;;   (-> (-P- SIGREACT1)
;; 	(lasted (!! (-P- S)) 3)))
;; monitor2
(assert (release false
		(-> SIGREACT1
		    (yesterday (and (! S) (yesterday (and (! S) (yesterday (! S)))))))))


;; (defvar the-system (Alw (&& monitor reaction numerical_reaction1 numerical_reaction2)))
