;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CONSTRAINTS FOR TESTING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; These are constraints just for testing, to produce meaningful sequences
(defvar cond1_holds (somf (lasted (-P- cond1) C1)))
(defvar cond1_ev_stops (somf (alwf (!! (-P- cond1)))))

(defvar history
(&&
(&&(!! (-P- ACT1))([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(-P- s))
(futr (&&(!! (-P- ACT1))([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(-P- s)) 1)
(futr (&&(!! (-P- ACT1))([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 2)
(futr (&&(!! (-P- ACT1))([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 3)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 4)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 5)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 6)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 7)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 8)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 9)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 10)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 11)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 12)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 13)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 14)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 15)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 16)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 17)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 18)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 19)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 10)(-P- SIGREACT1)(!! (-P- s))) 20)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 9.5)(-P- SIGREACT1)(!! (-P- s))) 21)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 22)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 23)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 24)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 25)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 26)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 27)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 28)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 9)(-P- SIGREACT1)(!! (-P- s))) 29)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 30)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 31)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 32)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 33)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 34)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 35)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 36)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 37)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 38)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 39)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 40)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 41)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 42)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 43)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 44)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 45)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 46)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 47)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 48)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 49)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 50)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 51)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 52)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 53)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 54)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 55)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 56)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 57)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 58)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 59)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 60)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 61)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 62)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 63)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 64)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 65)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)(!! (-P- SIGREACT1))(!! (-P- s))) 66)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 9.25)(-P- SIGREACT1)(!! (-P- s))) 67)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 9.125)(-P- SIGREACT1)(!! (-P- s))) 68)
(futr (&&(-P- ACT1)([=] (-V- REACT1) 0)) 69)
(futr (&&(!! (-P- s))) 70)

))

(defvar constraints
  (&&
;;    cond1_holds
;;    cond1_ev_stops
    history
    (somf ([>] (-V- react1) LB))
  ))

